`aplications.py`

```python
from flask import Flask, request, jsonify, render_template, session, redirect, url_for, flash
from psycopg2.extras import RealDictCursor
import psycopg2
import threading
import time
from urllib.parse import quote_plus
from functools import wraps
from werkzeug.security import generate_password_hash, check_password_hash

# Use price_fetcher from your workspace (has fallback to requests/BS4)
from price_fetcher import update_all_prices, fetch_price

app = Flask(__name__)
app.secret_key = "shop_smartley_change_this"  # change for production

# Database configuration
DB_HOST = "localhost"
DB_NAME = "postgres"
DB_USER = "postgres"
DB_PASSWORD = "admin"

def get_db_connection():
    conn = psycopg2.connect(
        host=DB_HOST,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    return conn

def create_tables():
    conn = get_db_connection()
    cur = conn.cursor()

    # Users table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id SERIAL PRIMARY KEY,
            user_name VARCHAR(100) NOT NULL,
            email VARCHAR(120) UNIQUE NOT NULL,
            mobile_number VARCHAR(20),
            address TEXT
        );
    """)

    # Vendors table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS vendors (
            vendor_id SERIAL PRIMARY KEY,
            vendor_name VARCHAR(100) NOT NULL,
            website_url TEXT
        );
    """)

    # Products table
    cur.execute("""
        CREATE TABLE IF NOT EXISTS products (
            product_id SERIAL PRIMARY KEY,
            product_name VARCHAR(120) NOT NULL,
            category VARCHAR(100)
        );
    """)

    # Product Prices table (track vendor + price for product)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS product_prices (
            price_id SERIAL PRIMARY KEY,
            product_id INTEGER REFERENCES products(product_id),
            vendor_id INTEGER REFERENCES vendors(vendor_id),
            product_price FLOAT NOT NULL
        );
    """)

    # Alerts table (set alerts per product by user)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            alert_id SERIAL PRIMARY KEY,
            user_id_reference INTEGER REFERENCES users(user_id),
            product_id_reference INTEGER REFERENCES products(product_id),
            price_alert FLOAT NOT NULL
        );
    """)

    # Deals table (time-bound discounts from vendors)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS deals (
            deal_id SERIAL PRIMARY KEY,
            product_id INTEGER REFERENCES products(product_id),
            vendor_id INTEGER REFERENCES vendors(vendor_id),
            deal_price FLOAT NOT NULL,
            start_date DATE NOT NULL,
            end_date DATE NOT NULL
        );
    """)

    conn.commit()
    cur.close()
    conn.close()

# Run table creation once
create_tables()

# --- LOGIN REQUIRED DECORATOR ---
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if "user" not in session:
            return redirect(url_for("login"))
        return f(*args, **kwargs)
    return decorated_function

# --- LOGIN/LOGOUT ROUTES ---
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT user_id, password_hash FROM users WHERE user_name=%s OR email=%s", (username, username))
        row = cur.fetchone()
        print("LOGIN DEBUG:", row)  # Add this line
        cur.close(); conn.close()
        if row and row[1] and check_password_hash(row[1], password):
            session["user"] = username
            return redirect(url_for("dashboard"))
        else:
            flash("Invalid credentials", "danger")
    return render_template("login.html")

@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

# --- REGISTER ROUTE ---
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        email = request.form.get("email")
        password = request.form.get("password")
        if not username or not email or not password:
            flash("All fields required", "danger")
            return render_template("register.html")
        conn = get_db_connection()
        cur = conn.cursor()
        # Check if user exists
        cur.execute("SELECT user_id FROM users WHERE user_name=%s OR email=%s", (username, email))
        if cur.fetchone():
            flash("Username or email already exists", "danger")
            cur.close(); conn.close()
            return render_template("register.html")
        # Store hashed password
        cur.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS password_hash TEXT;")
        cur.execute(
            "INSERT INTO users (user_name, email, password_hash) VALUES (%s, %s, %s)",
            (username, email, generate_password_hash(password))
        )
        conn.commit()
        cur.close(); conn.close()
        flash("Registration successful! Please login.", "success")
        return redirect(url_for("login"))
    return render_template("register.html")

# --- MAIN PAGE ROUTES (all require login) ---
@app.route("/")
@login_required
def index():
    return render_template("dashboard.html")

@app.route("/dashboard")
@login_required
def dashboard():
    return render_template("dashboard.html")

@app.route("/add-user")
@login_required
def add_user_page():
    return render_template("add_user.html")

@app.route("/add-vendor")
@login_required
def add_vendor_page():
    return render_template("add_vendor.html")

@app.route("/add-product")
@login_required
def add_product_page():
    return render_template("add_product.html")

@app.route("/set-alert")
@login_required
def set_alert_page():
    return render_template("set_alert.html")

@app.route("/get-deals")
@login_required
def get_deals_page():
    return render_template("get_deals.html")

@app.route("/view-products")
@login_required
def view_products_page():
    return render_template("view_products.html")

@app.route("/view-vendors")
@login_required
def view_vendors_page():
    return render_template("view_vendors.html")

@app.route("/track-products")
@login_required
def track_products_page():
    return render_template("track_products.html")

@app.route("/edit-vendor")
@login_required
def edit_vendor_page():
    return render_template("edit_vendor.html")

@app.route('/my-deals-page')
def my_deals_page():
    return render_template('my_deals.html')

@app.route('/add-deal-page')
def add_deal_page():
    return render_template('add_deal.html')

# --- API ENDPOINTS (do NOT require login) ---
@app.route('/users', methods=['POST'])
def add_user():
    data = request.get_json() or request.form
    name = data.get('user_name')
    email = data.get('email')
    mobile = data.get('mobile_number')
    address = data.get('address')
    if not name or not email:
        return jsonify({"message": "user_name and email required"}), 400
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO users (user_name, email, mobile_number, address)
        VALUES (%s, %s, %s, %s) RETURNING user_id
    """, (name, email, mobile, address))
    user_id = cur.fetchone()[0]
    conn.commit()
    cur.close(); conn.close()
    return jsonify({"message":"User added", "user_id": user_id})

@app.route('/vendors', methods=['POST'])
def add_vendor():
    data = request.get_json() or request.form
    name = data.get('vendor_name')
    url = data.get('website_url')
    if not name:
        return jsonify({"message":"vendor_name required"}), 400
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO vendors (vendor_name, website_url) VALUES (%s,%s) RETURNING vendor_id", (name, url))
    vendor_id = cur.fetchone()[0]
    conn.commit()
    cur.close(); conn.close()
    return jsonify({"message":"Vendor added", "vendor_id": vendor_id})

@app.route('/products', methods=['POST'])
def add_product():
    data = request.get_json() or request.form
    pname = data.get('product_name')
    category = data.get('category')
    vendors = data.get('vendors') or []
    if not pname:
        return jsonify({"message":"product_name required"}), 400
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("INSERT INTO products (product_name, category) VALUES (%s,%s) RETURNING product_id", (pname, category))
    product_id = cur.fetchone()['product_id']
    # vendors: list of {vendor_name, vendor_website, price}
    for v in vendors:
        vname = v.get('vendor_name')
        vurl = v.get('vendor_website') or v.get('website') or v.get('vendor_url')
        price = v.get('price')
        if not vname:
            continue
        # upsert vendor
        cur.execute("SELECT vendor_id FROM vendors WHERE vendor_name = %s", (vname,))
        row = cur.fetchone()
        if row:
            vendor_id = row['vendor_id']
            # update website if provided
            if vurl:
                cur.execute("UPDATE vendors SET website_url = %s WHERE vendor_id = %s", (vurl, vendor_id))
        else:
            cur.execute("INSERT INTO vendors (vendor_name, website_url) VALUES (%s,%s) RETURNING vendor_id", (vname, vurl))
            vendor_id = cur.fetchone()['vendor_id']
        if price is not None:
            cur.execute("INSERT INTO product_prices (product_id, vendor_id, product_price) VALUES (%s,%s,%s)", (product_id, vendor_id, price))
    conn.commit()
    cur.close(); conn.close()
    return jsonify({"message":"Product added", "product_id": product_id})

@app.route('/alerts', methods=['POST'])
def add_alert():
    if "user" not in session:
        return jsonify({"message": "Not logged in"}), 401
    data = request.get_json()
    product_id = data.get("product_id")
    price_alert = data.get("price_alert")
    user_name = session["user"]

    # Get user_id from username
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE user_name = %s", (user_name,))
    user_row = cur.fetchone()
    if not user_row:
        cur.close(); conn.close()
        return jsonify({"message": "User not found"}), 400
    user_id = user_row[0]

    # Insert alert
    cur.execute(
        "INSERT INTO alerts (user_id_reference, product_id_reference, price_alert) VALUES (%s, %s, %s)",
        (user_id, product_id, price_alert)
    )
    conn.commit()
    cur.close()
    conn.close()
    return jsonify({"message": "Alert set successfully!"})

@app.route('/deals/<int:user_id>', methods=['GET'])
def get_user_deals(user_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT a.alert_id, a.price_alert, p.product_id, p.product_name,
               v.vendor_id, v.vendor_name, v.website_url, pp.product_price as current_price
        FROM alerts a
        JOIN products p ON a.product_id_reference = p.product_id
        LEFT JOIN product_prices pp ON pp.product_id = p.product_id
        LEFT JOIN vendors v ON pp.vendor_id = v.vendor_id
        WHERE a.user_id_reference = %s
    """, (user_id,))
    rows = cur.fetchall()
    cur.close(); conn.close()
    # group rows by product
    results = []
    by_product = {}
    for r in rows:
        pid = r['product_id']
        if pid not in by_product:
            by_product[pid] = {
                "product_id": pid,
                "product_name": r['product_name'],
                "alert_price": r['price_alert'],
                "vendors": []
            }
        by_product[pid]['vendors'].append({
            "vendor_id": r['vendor_id'],
            "vendor_name": r['vendor_name'],
            "vendor_website": r['website_url'],
            "current_price": r['current_price']
        })
    results = list(by_product.values())
    return jsonify({"user_id": user_id, "deals": results})

@app.route('/products', methods=['GET'])
def list_products():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT * FROM products ORDER BY product_name")
    prods = cur.fetchall()
    # attach vendors
    for p in prods:
        cur.execute("""
            SELECT v.vendor_id, v.vendor_name, v.website_url, pp.product_price
            FROM product_prices pp JOIN vendors v ON pp.vendor_id = v.vendor_id
            WHERE pp.product_id = %s
        """, (p['product_id'],))
        p['vendors'] = cur.fetchall()
    cur.close(); conn.close()
    return jsonify(prods)

@app.route('/vendors', methods=['GET'])
def list_vendors():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT * FROM vendors ORDER BY vendor_name")
    vendors = cur.fetchall()
    cur.close(); conn.close()
    return jsonify(vendors)

@app.route('/users', methods=['GET'])
def list_users():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT * FROM users ORDER BY user_name")
    users = cur.fetchall()
    cur.close(); conn.close()
    return jsonify(users)

# --- Vendor detail (GET / PUT / DELETE) ---
@app.route('/vendors/<int:vendor_id>', methods=['GET', 'PUT', 'DELETE'])
def vendor_detail(vendor_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    if request.method == 'GET':
        cur.execute("SELECT * FROM vendors WHERE vendor_id = %s", (vendor_id,))
        vendor = cur.fetchone()
        cur.close(); conn.close()
        if not vendor:
            return jsonify({"message": "Vendor not found"}), 404
        return jsonify(vendor)
    if request.method == 'PUT':
        data = request.get_json()
        cur.execute("UPDATE vendors SET vendor_name=%s, website_url=%s WHERE vendor_id=%s",
                    (data.get('vendor_name'), data.get('website_url'), vendor_id))
        conn.commit()
        cur.close(); conn.close()
        return jsonify({"message": "Vendor updated successfully"})
    if request.method == 'DELETE':
        cur.execute("DELETE FROM product_prices WHERE vendor_id = %s", (vendor_id,))
        cur.execute("DELETE FROM vendors WHERE vendor_id = %s", (vendor_id,))
        conn.commit()
        cur.close(); conn.close()
        return jsonify({"message": "Vendor deleted"})

# --- Product detail (GET / PUT / DELETE) ---
@app.route('/products/<int:product_id>', methods=['GET', 'PUT', 'DELETE'])
def product_detail(product_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    if request.method == 'GET':
        cur.execute("SELECT * FROM products WHERE product_id = %s", (product_id,))
        product = cur.fetchone()
        if not product:
            cur.close(); conn.close()
            return jsonify({"message": "Product not found"}), 404
        cur.execute("""
            SELECT v.vendor_id, v.vendor_name, v.website_url, pp.product_price
            FROM product_prices pp JOIN vendors v ON pp.vendor_id = v.vendor_id
            WHERE pp.product_id = %s
        """, (product_id,))
        product['vendors'] = cur.fetchall()
        cur.close(); conn.close()
        return jsonify(product)

    if request.method == 'PUT':
        data = request.get_json()
        cur.execute("UPDATE products SET product_name=%s, category=%s WHERE product_id=%s",
                    (data.get('product_name'), data.get('category'), product_id))
        # upsert vendor prices provided in payload
        for v in data.get('vendors', []):
            vendor_id = v.get('vendor_id')
            if not vendor_id:
                # try find by name or create vendor
                cur.execute("SELECT vendor_id FROM vendors WHERE vendor_name = %s", (v.get('vendor_name'),))
                row = cur.fetchone()
                if row:
                    vendor_id = row['vendor_id']
                else:
                    cur.execute("INSERT INTO vendors (vendor_name, website_url) VALUES (%s, %s) RETURNING vendor_id",
                                (v.get('vendor_name'), v.get('vendor_website')))
                    vendor_id = cur.fetchone()['vendor_id']
            # update or insert price
            cur.execute("SELECT price_id FROM product_prices WHERE product_id=%s AND vendor_id=%s", (product_id, vendor_id))
            pr = cur.fetchone()
            if pr:
                cur.execute("UPDATE product_prices SET product_price=%s WHERE price_id=%s", (v.get('price'), pr['price_id']))
            else:
                cur.execute("INSERT INTO product_prices (product_id, vendor_id, product_price) VALUES (%s, %s, %s)",
                            (product_id, vendor_id, v.get('price')))
        conn.commit()
        cur.close(); conn.close()
        return jsonify({"message": "Product updated"})

    if request.method == 'DELETE':
        cur.execute("DELETE FROM product_prices WHERE product_id = %s", (product_id,))
        cur.execute("DELETE FROM alerts WHERE product_id_reference = %s", (product_id,))
        cur.execute("DELETE FROM products WHERE product_id = %s", (product_id,))
        conn.commit()
        cur.close(); conn.close()
        return jsonify({"message": "Product deleted"})

# --- Search across platforms / vendor URLs (real-time) ---
@app.route('/search', methods=['GET'])
def search_products():
    q = request.args.get('q')
    if not q:
        return jsonify({"message": "Query required"}), 400
    q_enc = quote_plus(q)

    results = []
    # default platform search URLs
    platform_urls = [
        ("Amazon", f"https://www.amazon.in/s?k={q_enc}"),
        ("Flipkart", f"https://www.flipkart.com/search?q={q_enc}"),
        ("Apple", f"https://www.apple.com/search/?q={q_enc}")
    ]

    # include vendor-specific URLs from DB (if vendor has website_url)
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT vendor_name, website_url FROM vendors WHERE website_url IS NOT NULL")
    vendor_rows = cur.fetchall()
    cur.close(); conn.close()
    for v in vendor_rows:
        if v['website_url']:
            platform_urls.append((v['vendor_name'], v['website_url']))

    # sequentially fetch price (avoid spamming)
    for platform_name, url in platform_urls:
        try:
            price = fetch_price(url)
        except Exception:
            price = None
        results.append({
            "platform": platform_name,
            "url": url,
            "price": float(price) if price is not None else None
        })

    return jsonify({
        "query": q,
        "results": results
    })

def price_updater_loop(interval_seconds=300):
    """Background loop: refresh all vendor prices every interval_seconds."""
    while True:
        try:
            update_all_prices()
        except Exception as e:
            print("Price updater error:", e)
        time.sleep(interval_seconds)

# start background updater (daemon)
updater_thread = threading.Thread(target=price_updater_loop, args=(300,), daemon=True)
updater_thread.start()

@app.route("/api/track-products", methods=["GET"])
def api_track_products():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT 
            p.product_id,
            p.product_name,
            p.category,
            v.vendor_name,
            v.website_url,
            pp.product_price
        FROM product_prices pp
        JOIN products p ON pp.product_id = p.product_id
        JOIN vendors v ON pp.vendor_id = v.vendor_id
        ORDER BY p.product_id
    """)
    data = cur.fetchall()
    cur.close()
    conn.close()
    product_map = {}
    for row in data:
        pid = row['product_id']
        pname = row['product_name']
        cat = row['category']
        vname = row['vendor_name']
        vurl = row['website_url']
        price = row['product_price']
        if pid not in product_map:
            product_map[pid] = {
                "product_id": pid,
                "product_name": pname,
                "category": cat,
                "vendors": []
            }
        product_map[pid]["vendors"].append({
            "vendor_name": vname,
            "vendor_website": vurl,
            "price": float(price) if price is not None else None
        })
    results = [p for p in product_map.values() if len(p["vendors"]) > 0]
    return jsonify(results)

@app.route('/deals', methods=['GET'])
def get_deals():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT d.deal_id, d.product_id, d.vendor_id, d.deal_price, d.start_date, d.end_date,
               p.product_name, v.vendor_name
        FROM deals d
        JOIN products p ON d.product_id = p.product_id
        JOIN vendors v ON d.vendor_id = v.vendor_id
        WHERE d.end_date >= CURRENT_DATE
        ORDER BY d.start_date DESC
        LIMIT 10
    """)
    deals = cur.fetchall()
    cur.close()
    conn.close()
    return jsonify(deals)

@app.route('/my-deals', methods=['GET'])
def my_deals():
    if "user" not in session:
        return jsonify([])
    user = session["user"]
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("""
        SELECT a.alert_id, a.product_id_reference AS product_id, a.price_alert, p.product_name, p.category
        FROM alerts a
        JOIN products p ON a.product_id_reference = p.product_id
        JOIN users u ON a.user_id_reference = u.user_id
        WHERE u.user_name = %s
        ORDER BY a.alert_id DESC
        LIMIT 20
    """, (user,))
    alerts = cur.fetchall()
    cur.close()
    conn.close()
    return jsonify(alerts)

@app.route('/add-deal', methods=['POST'])
def add_deal():
    if "user" not in session:
        return jsonify({"message": "Not logged in"}), 401
    data = request.get_json()
    product_id = data.get("product_id")
    vendor_id = data.get("vendor_id")
    deal_price = data.get("deal_price")
    start_date = data.get("start_date")
    end_date = data.get("end_date")
    if not all([product_id, vendor_id, deal_price, start_date, end_date]):
        return jsonify({"message": "Missing fields"}), 400

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO deals (product_id, vendor_id, deal_price, start_date, end_date) VALUES (%s, %s, %s, %s, %s)",
        (product_id, vendor_id, deal_price, start_date, end_date)
    )
    conn.commit()
    cur.close()
    conn.close()
    return jsonify({"message": "Deal added successfully!"})


if __name__ == '__main__':
       app.run(host='0.0.0.0', port=5000, debug=True)
```

`code.txt`

```

```

`price_fetcher.py`

```python
"""
Robust price_fetcher with optional Playwright support and requests+BeautifulSoup fallback.
Exports:
 - fetch_price(url) -> float|None
 - update_all_prices() -> updates DB from vendor URLs
"""
import re
import time
from urllib.parse import urlparse

# DB config (keep in sync with aplications.py)
DB_HOST = "localhost"
DB_NAME = "postgres"
DB_USER = "postgres"
DB_PASSWORD = "admin"

# DB dependency imported lazily to avoid import-time errors in environments without psycopg2
def get_db_connection():
    import psycopg2
    return psycopg2.connect(host=DB_HOST, dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD)

def extract_number(text):
    if not text:
        return None
    # find first number-like token (handles commas/periods)
    m = re.search(r'[\d\.,]+', text.replace('\xa0', ' '))
    if not m:
        return None
    num = m.group(0).replace(',', '')
    try:
        return float(num)
    except Exception:
        return None

# Try Playwright first; if not available, fall back to requests + BeautifulSoup
USE_PLAYWRIGHT = False
try:
    from playwright.sync_api import sync_playwright  # type: ignore
    USE_PLAYWRIGHT = True
except Exception:
    USE_PLAYWRIGHT = False
    import requests  # type: ignore
    from bs4 import BeautifulSoup  # type: ignore


def fetch_price_playwright(url, timeout=15000):
    """Fetch page with Playwright and try domain-specific selectors, fallback to body text."""
    from playwright.sync_api import sync_playwright  # Import inside function
    parsed = urlparse(url)
    domain = parsed.netloc.lower()
    price_text = None

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        try:
            page.goto(url, timeout=timeout)
            # domain-specific selectors
            if "amazon." in domain:
                selectors = ["#priceblock_ourprice", "#priceblock_dealprice", "#price_inside_buybox", ".a-color-price"]
            elif "flipkart." in domain:
                selectors = ["._30jeq3._16Jk6d", "._1vC4OE"]
            elif "apple." in domain or "hp." in domain:
                selectors = [".price", ".product-price", ".offer-price", "[itemprop=price]"]
            else:
                selectors = ["meta[itemprop='price']", "[class*=price]", "[id*=price]", "body"]

            for sel in selectors:
                try:
                    el = page.query_selector(sel)
                    if el:
                        txt = el.inner_text().strip()
                        if txt:
                            price_text = txt
                            break
                except Exception:
                    continue

            # fallback: read entire page text and extract first number
            if not price_text:
                body = page.locator("body").inner_text()
                price_text = body

        except Exception:
            try:
                browser.close()
            except Exception:
                pass
            return None
        try:
            browser.close()
        except Exception:
            pass

    return extract_number(price_text)
def fetch_price_requests(url, timeout=15):
    """Fetch page using requests + BeautifulSoup and try common selectors, fallback to whole text."""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0 Safari/537.36"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=timeout)
        resp.raise_for_status()
    except Exception:
        return None

    soup = BeautifulSoup(resp.text, "lxml")
    domain = urlparse(url).netloc.lower()
    price_text = None

    if "amazon." in domain:
        selectors = ["#priceblock_ourprice", "#priceblock_dealprice", "#price_inside_buybox", ".a-color-price"]
    elif "flipkart." in domain:
        selectors = ["._30jeq3._16Jk6d", "._1vC4OE"]
    elif "apple." in domain or "hp." in domain:
        selectors = [".price", ".product-price", ".offer-price", "[itemprop=price]"]
    else:
        selectors = ["meta[itemprop='price']", "[class*=price]", "[id*=price]"]

    for sel in selectors:
        try:
            el = soup.select_one(sel)
            if el:
                price_text = el.get_text().strip()
                break
        except Exception:
            continue

    if not price_text:
        text = soup.get_text(separator=' ')
        price_text = text

    return extract_number(price_text)

def fetch_price(url):
    """Public: returns price (float) or None. Uses Playwright if available else requests+BS4."""
    if not url:
        return None
    try:
        if USE_PLAYWRIGHT:
            return fetch_price_playwright(url)
        else:
            return fetch_price_requests(url)
    except Exception:
        return None

def update_all_prices():
    """Read product/vendor links from DB and update product_prices with current fetched price."""
    conn = get_db_connection()
    cur = conn.cursor()
    # get products and vendor urls from DB
    cur.execute("""
        SELECT p.product_id, p.product_name, v.vendor_id, v.vendor_name, v.website_url
        FROM products p
        JOIN product_prices pp ON pp.product_id = p.product_id
        JOIN vendors v ON pp.vendor_id = v.vendor_id
        GROUP BY p.product_id, p.product_name, v.vendor_id, v.vendor_name, v.website_url
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()

    if not rows:
        return

    for product_id, product_name, vendor_id, vendor_name, website_url in rows:
        if not website_url:
            continue
        try:
            price = fetch_price(website_url)
        except Exception:
            price = None

        if price is None:
            # couldn't determine price for this URL
            continue

        conn = get_db_connection()
        cur = conn.cursor()
        # update existing product_prices row or insert if missing (should exist)
        cur.execute("""
            SELECT price_id FROM product_prices
            WHERE product_id = %s AND vendor_id = %s
        """, (product_id, vendor_id))
        r = cur.fetchone()
        if r:
            cur.execute("UPDATE product_prices SET product_price = %s WHERE price_id = %s", (price, r[0]))
        else:
            cur.execute("INSERT INTO product_prices(product_id, vendor_id, product_price) VALUES (%s, %s, %s)", (product_id, vendor_id, price))
        conn.commit()
        cur.close()
        conn.close()
        # small delay to be polite
        time.sleep(1)

if __name__ == "__main__":
    update_all_prices()
```

`requirements.txt`

```
absl-py==2.1.0
acres==0.3.0
ai-core==0.0.14
aiofiles==24.1.0
aiohappyeyeballs==2.4.6
aiohttp==3.11.12
aiosignal==1.3.2
albucore==0.0.24
albumentations==1.3.1
alembic==1.15.1
altair==5.5.0
annotated-types==0.7.0
anyio==4.7.0
APScheduler==3.11.0
argon2-cffi==23.1.0
argon2-cffi-bindings==21.2.0
arrow==1.3.0
asgiref==3.8.1
asttokens==3.0.0
astunparse==1.6.3
async-generator==1.10
async-lru==2.0.4
attrs==24.3.0
auth==0.5.3
babel==2.16.0
backports.tarfile==1.2.0
base58==2.1.1
bcrypt==4.2.1
beautifulsoup4==4.12.3
binaryornot==0.4.4
bleach==6.2.0
blinker==1.9.0
cachetools==5.5.0
camelot-py==1.0.0
certifi==2024.12.14
cffi==1.17.1
chardet==5.2.0
charset-normalizer==3.4.1
ci-info==0.3.0
click==8.1.8
coincurve==21.0.0
colorama==0.4.6
comm==0.2.2
comtypes==1.4.8
configobj==5.0.9
configparser==7.1.0
contourpy==1.3.1
cookiecutter==2.6.0
cron-converter==1.2.1
cryptography==44.0.3
cycler==0.12.1
dataclasses-json==0.6.7
datasets==3.6.0
debugpy==1.8.11
decorator==5.1.1
defusedxml==0.7.1
dill==0.3.8
distro==1.9.0
dj-database-url==3.0.0
Django==5.2.3
django-cors-headers==4.3.1
django-filter==23.5
django-stubs==5.1.1
django-stubs-ext==5.1.1
django-timezone-utils==0.15.0
djangorestframework==3.14.0
djongo==1.3.6
dnspython==2.7.0
docx==0.2.4
drf-spectacular==0.28.0
drf-yasg==1.21.8
ecdsa==0.19.1
email_validator==2.2.0
env-tools==2.4.0
et_xmlfile==2.0.0
etelemetry==0.3.1
eventlet==0.39.0
executing==2.1.0
faiss-cpu==1.11.0
falcon==4.0.2
fastapi==0.115.6
fastjsonschema==2.21.1
filelock==3.17.0
fitz==0.0.1.dev2
Flask==3.1.0
Flask-Bcrypt==1.0.1
Flask-Cors==5.0.0
Flask-JWT-Extended==4.7.1
Flask-Login==0.6.3
Flask-Mail==0.10.0
Flask-Migrate==4.1.0
Flask-SQLAlchemy==3.1.1
flatbuffers==24.12.23
fonttools==4.55.3
fpdf2==2.8.3
fqdn==1.5.1
frozenlist==1.5.0
fsspec==2025.2.0
gast==0.6.0
gcloud==0.18.3
gitdb==4.0.12
GitPython==3.1.44
google-ai-generativelanguage==0.6.10
google-api-core==2.24.0
google-api-python-client==2.156.0
google-apps-meet==0.1.11
google-auth==2.37.0
google-auth-httplib2==0.2.0
google-auth-oauthlib==1.2.1
google-cloud-speech==2.31.0
google-cloud-texttospeech==2.25.0
google-generativeai==0.8.3
google-pasta==0.2.0
googleapis-common-protos==1.66.0
greenlet==3.1.1
grpcio==1.68.1
grpcio-status==1.62.3
gTTS==2.5.4
gunicorn==23.0.0
h11==0.14.0
h5py==3.12.1
httpcore==1.0.7
httplib2==0.22.0
httpx==0.28.1
httpx-sse==0.4.0
huggingface-hub==0.28.1
idna==3.10
ifaddr==0.2.0
imageio==2.37.0
importlib_metadata==8.5.0
importlib_resources==6.5.2
inflection==0.5.1
iniconfig==2.0.0
ipykernel==6.29.5
ipython==8.31.0
ipywidgets==8.1.5
isodate==0.6.1
isoduration==20.11.0
itsdangerous==2.2.0
jaraco.classes==3.4.0
jaraco.context==6.0.1
jaraco.functools==4.1.0
jedi==0.19.2
Jinja2==3.1.5
jiter==0.8.2
joblib==1.4.2
js2pysecrets==0.1.1
json5==0.10.0
jsonpatch==1.33
jsonpointer==3.0.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
jupyter==1.1.1
jupyter-console==6.6.3
jupyter-events==0.11.0
jupyter-lsp==2.2.5
jupyter_client==8.6.3
jupyter_core==5.7.2
jupyter_server==2.15.0
jupyter_server_terminals==0.5.3
jupyterlab==4.3.4
jupyterlab_pygments==0.3.0
jupyterlab_server==2.27.3
jupyterlab_widgets==3.0.13
kademlia==2.2.3
keras==3.7.0
keyring==25.6.0
kiwisolver==1.4.8
langchain==0.3.25
langchain-community==0.3.24
langchain-core==0.3.60
langchain-ollama==0.3.3
langchain-text-splitters==0.3.8
langsmith==0.3.42
lazy_loader==0.4
Levenshtein==0.27.1
libclang==18.1.1
libp2p==0.2.9
lightning==2.5.1.post0
lightning-utilities==0.14.3
looseversion==1.3.0
lru-dict==1.3.0
lxml==5.4.0
Mako==1.3.9
Markdown==3.7
markdown-it-py==3.0.0
markdown2==2.5.3
MarkupSafe==3.0.2
marshmallow==3.26.1
matplotlib==3.10.0
matplotlib-inline==0.1.7
mdurl==0.1.2
mistune==3.0.2
ml-dtypes==0.4.1
mongoengine==0.29.1
more-itertools==10.5.0
motor==3.7.1
mpmath==1.3.0
multiaddr==0.0.9
multidict==6.1.0
multiprocess==0.70.16
munch==4.0.0
mypy==1.13.0
mypy-extensions==1.0.0
mypy-protobuf==3.6.0
mysql==0.0.3
mysql-connector==2.2.9
mysqlclient==2.2.6
namex==0.0.8
narwhals==1.20.1
nbclient==0.10.2
nbconvert==7.16.4
nbformat==5.10.4
nest-asyncio==1.6.0
netaddr==1.3.0
networkx==3.4.2
nibabel==5.3.2
nipype==1.10.0
nltk==3.9.1
noiseprotocol==0.3.1
notebook==7.3.2
notebook_shim==0.2.4
nougat-ocr @ git+https://github.com/facebookresearch/nougat.git@5a92920d342fb6acf05fc9b594ccb4053dbe8e7a
numpy==2.0.2
oauth2client==4.1.3
oauthlib==3.2.2
ollama==0.4.8
openai==0.28.0
opencv-contrib-python==4.10.0.84
opencv-python==4.11.0.86
opencv-python-headless==4.11.0.86
openpyxl==3.1.5
opt_einsum==3.4.0
optree==0.13.1
orjson==3.10.18
outcome==1.3.0.post0
overrides==7.7.0
packaging==24.2
pandas==2.2.3
pandocfilters==1.5.1
parso==0.8.4
passlib==1.7.4
pathlib==1.0.1
pdfminer.six==20250327
pdfplumber==0.11.6
pillow==10.2.0
platformdirs==4.3.6
pluggy==1.5.0
prometheus_client==0.21.1
prompt_toolkit==3.0.48
propcache==0.2.1
proto-plus==1.25.0
protobuf==4.25.5
prov==2.0.1
psutil==6.1.1
psycopg==3.2.3
psycopg-binary==3.2.3
pure_eval==0.2.3
puremagic==1.29
pyarrow==18.1.0
pyasn1==0.6.1
pyasn1_modules==0.4.1
pycparser==2.22
pycryptodome==3.23.0
pydantic==2.10.4
pydantic-settings==2.9.1
pydantic_core==2.27.2
pydeck==0.9.1
pydot==4.0.0
Pygments==2.18.0
PyJWT==2.10.1
pymongo==4.13.2
pymultihash==0.8.2
PyMuPDF==1.25.5
PyNaCl==1.5.0
pyparsing==3.2.0
pypdf==3.17.4
PyPDF2==3.0.1
pypdfium2==4.30.1
pypiwin32==223
pyshamir==1.0.4
pytest==8.3.4
python-dateutil==2.9.0.post0
python-docx==1.1.2
python-dotenv==1.0.1
python-jose==3.5.0
python-json-logger==3.2.1
python-Levenshtein==0.27.1
python-multipart==0.0.20
python-pptx==1.0.2
python-slugify==8.0.4
python3-openid==3.2.0
pytorch-lightning==2.5.1.post0
pyttsx3==2.98
pytz==2024.2
pywin32==308
pywin32-ctypes==0.2.3
pywinpty==2.0.14
pyxnat==1.6.3
PyYAML==6.0.2
pyzmq==26.2.0
qudida==0.0.4
RapidFuzz==3.11.0
rdflib==6.3.2
redis==5.2.1
referencing==0.35.1
regex==2024.11.6
reportlab==4.2.5
requests==2.32.3
requests-oauthlib==2.0.0
requests-toolbelt==1.0.0
RestrictedPython==7.4
rfc3339-validator==0.1.4
rfc3986-validator==0.1.1
rich==13.9.4
rpcudp==5.0.1
rpds-py==0.22.3
rsa==4.9
ruamel.yaml==0.18.11
ruamel.yaml.clib==0.2.12
safetensors==0.5.2
scikit-image==0.25.2
scikit-learn==1.6.0
scipy==1.14.1
sconf==0.2.5
Send2Trash==1.8.3
sentencepiece==0.2.0
shellingham==1.5.4
simplejson==3.20.1
simsimd==6.2.1
six==1.17.0
smmap==5.0.2
sniffio==1.3.1
social-auth-app-django==5.4.3
social-auth-core==4.6.1
sortedcontainers==2.4.0
soupsieve==2.6
SQLAlchemy==2.0.37
sqlparse==0.5.3
stack-data==0.6.3
starlette==0.41.3
statsd==4.0.1
streamlit==1.41.1
stringzilla==3.12.5
sympy==1.14.0
tabulate==0.9.0
tenacity==9.0.0
tensorboard==2.18.0
tensorboard-data-server==0.7.2
tensorflow==2.18.0
tensorflow-io-gcs-filesystem==0.31.0
tensorflow_intel==2.18.0
termcolor==2.5.0
terminado==0.18.1
text-unidecode==1.3
tf_keras==2.18.0
threadpoolctl==3.5.0
tifffile==2025.5.26
tiktoken==0.9.0
timm==0.5.4
tini==4.0.0
tinycss2==1.4.0
tokenizers==0.15.2
toml==0.10.2
torch==2.7.0
torchmetrics==1.7.1
torchvision==0.22.0
tornado==6.4.2
tqdm==4.67.1
traitlets==5.14.3
traits==7.0.2
transformers==4.38.2
trio==0.30.0
trio-typing==0.10.0
typer==0.15.1
types-protobuf==6.30.2.20250703
types-python-dateutil==2.9.0.20241206
types-PyYAML==6.0.12.20241230
typing-inspect==0.9.0
typing-inspection==0.4.0
typing_extensions==4.12.2
tzdata==2024.2
tzlocal==5.3.1
u-msgpack-python==2.8.0
uri-template==1.3.0
uritemplate==4.1.1
urllib3==2.3.0
uuid==1.30
uvicorn==0.34.0
varint==1.0.2
waitress==3.0.2
watchdog==6.0.0
wcwidth==0.2.13
webcolors==24.11.1
webencodings==0.5.1
websocket-client==1.8.0
Werkzeug==3.1.3
widgetsnbextension==4.0.13
wrapt==1.17.0
XlsxWriter==3.2.3
xxhash==3.5.0
yarl==1.18.3
zeroconf==0.147.0
zipp==3.21.0
zstandard==0.23.0

```

`static/css/custom.css`

```css
body { font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif; background:#f7f8fa; }
.card { border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.05); }
.form-row .col { padding-right: 8px; }
.vendor-row .removeRow { margin-top: 4px; }
```

`static/js/products.js`

```javascript
document.addEventListener('DOMContentLoaded', function(){
  const params = new URLSearchParams(window.location.search);
  const productId = params.get('product_id');
  if (!productId) return;

  const msg = document.getElementById('productMessage');

  function addVendorRow(v = {}) {
    const container = document.getElementById('vendorPriceRows');
    const idx = Date.now();
    const div = document.createElement('div');
    div.className = 'form-row mb-2 vendor-row';
    div.innerHTML = `
      <div class="col"><input class="form-control vendor_name" placeholder="Vendor name" value="${v.vendor_name||''}"></div>
      <div class="col"><input class="form-control vendor_website" placeholder="Vendor website" value="${v.vendor_website||''}"></div>
      <div class="col"><input class="form-control vendor_price" placeholder="Price" value="${v.price||''}"></div>
      <div class="col-auto"><button class="btn btn-sm btn-danger removeRow">Remove</button></div>
    `;
    container.appendChild(div);
    div.querySelector('.removeRow').addEventListener('click', ()=> div.remove());
  }

  // load product
  fetch(`/products/${productId}`).then(r => r.json()).then(prod => {
    document.getElementById('product_id').value = prod.product_id;
    document.getElementById('product_name').value = prod.product_name;
    document.getElementById('product_category').value = prod.category || '';
    (prod.vendors || []).forEach(v => addVendorRow({
      vendor_name: v.vendor_name, vendor_website: v.website_url || '', price: v.product_price || v.product_price
    }));
  }).catch(()=> msg.innerHTML = '<div class="alert alert-danger">Failed to load product</div>');

  document.getElementById('addVendorRow').addEventListener('click', ()=> addVendorRow());

  document.getElementById('productEditForm').addEventListener('submit', function(e){
    e.preventDefault();
    const vendors = [];
    const names = document.getElementsByClassName('vendor_name');
    const webs = document.getElementsByClassName('vendor_website');
    const prices = document.getElementsByClassName('vendor_price');
    for (let i=0;i<names.length;i++){
      if (!names[i].value) continue;
      vendors.push({
        vendor_name: names[i].value,
        vendor_website: webs[i].value,
        price: parseFloat(prices[i].value) || null
      });
    }
    fetch(`/products/${productId}`, {
      method: 'PUT',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({
        product_name: document.getElementById('product_name').value,
        category: document.getElementById('product_category').value,
        vendors: vendors
      })
    }).then(r => r.json()).then(res => {
      msg.innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    }).catch(()=> msg.innerHTML = '<div class="alert alert-danger">Save failed</div>');
  });

  document.getElementById('deleteProduct').addEventListener('click', function(){
    if (!confirm('Delete this product?')) return;
    fetch(`/products/${productId}`, { method: 'DELETE' })
      .then(r => r.json()).then(res => {
        alert(res.message);
        window.location = '/view-products';
      }).catch(()=> alert('Delete failed'));
  });

  // Assuming `data` is available in this scope
  let html = '';
  data.forEach(a => {
    html += `<li class="list-group-item">
      <b>${a.product_name}</b> (${a.category}) — Target Price: ₹${a.price_alert}
    </li>`;
  });
  document.getElementById('yourTargetElementId').innerHTML = html; // Replace with your actual element ID
});
```

`static/js/search.js`

```javascript
document.addEventListener('DOMContentLoaded', function(){
  const form = document.getElementById('searchForm');
  const input = document.getElementById('searchQuery');
  const out = document.getElementById('searchResults');

  function render(results){
    if(!results || results.length===0){ out.innerHTML = '<p>No results</p>'; return; }
    let html = '<div class="row">';
    results.forEach(r => {
      html += `<div class="col-md-4"><div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">${r.platform}</h5>
          <p class="card-text">Price: ${r.price===null ? '<em>Not found</em>' : '₹'+r.price}</p>
          <a href="${r.url}" target="_blank" class="btn btn-sm btn-primary">Open ${r.platform}</a>
        </div></div></div>`;
    });
    html += '</div>';
    out.innerHTML = html;
  }

  form.addEventListener('submit', function(e){
    e.preventDefault();
    const q = input.value.trim();
    if(!q) return;
    out.innerHTML = '<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>';
    fetch(`/search?q=${encodeURIComponent(q)}`)
      .then(r => r.json())
      .then(res => render(res.results || []))
      .catch(()=> out.innerHTML = '<div class="alert alert-danger">Search failed</div>');
  });
});
```

`static/js/vendors.js`

```javascript
document.addEventListener('DOMContentLoaded', function(){
  const params = new URLSearchParams(window.location.search);
  const vendorId = params.get('vendor_id');
  if (!vendorId) {
    document.getElementById('vendorEditForm').style.display = 'none';
    document.getElementById('vendorMessage').innerHTML = '<div class="alert alert-danger">No vendor selected.</div>';
    return;
  }
  const idInput = document.getElementById('vendor_id');
  const nameInput = document.getElementById('vendor_name');
  const websiteInput = document.getElementById('vendor_website');
  const msg = document.getElementById('vendorMessage');

  // load vendor
  fetch(`/vendors/${vendorId}`).then(r => r.json()).then(v => {
    idInput.value = vendorId;
    nameInput.value = v.vendor_name || '';
    websiteInput.value = v.website_url || '';
  }).catch(()=> msg.innerHTML = '<div class="alert alert-danger">Failed to load vendor</div>');

  // save
  document.getElementById('vendorEditForm').addEventListener('submit', function(e){
    e.preventDefault();
    fetch(`/vendors/${vendorId}`, {
      method: 'PUT',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({
        vendor_name: nameInput.value,
        website_url: websiteInput.value
      })
    }).then(r => r.json()).then(res => {
      msg.innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    }).catch(()=> msg.innerHTML = '<div class="alert alert-danger">Save failed</div>');
  });

  // delete
  document.getElementById('deleteVendor').addEventListener('click', function(){
    if (!confirm('Delete this vendor?')) return;
    fetch(`/vendors/${vendorId}`, { method: 'DELETE' })
      .then(r => r.json()).then(res => {
        alert(res.message);
        window.location = '/view-vendors';
      }).catch(()=> alert('Delete failed'));
  });
});
```

`static/script.js`

```javascript
// Common JavaScript functions can be added here.
document.addEventListener("DOMContentLoaded", function(){
  console.log("Custom JS loaded - All pages ready.");
});

function openSetAlert(pid, pname) {
  document.getElementById('alert_product_id').value = pid;
  document.getElementById('alert_product_name').value = pname;
  document.getElementById('setAlertModal').classList.add('show');
}
// Hide modal on submit or after alert set
document.getElementById('setAlertForm').onsubmit = function(e){
  e.preventDefault();
  fetch('/alerts', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      product_id: document.getElementById('alert_product_id').value,
      price_alert: document.getElementById('alert_price').value
    })
  })
  .then(r=>r.json())
  .then(res=>{
    document.getElementById('alertMsg').innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    setTimeout(()=>document.getElementById('setAlertModal').classList.remove('show'), 1000);
  });
};
```

`static/style.css`

```css
body {
  background-color: #f1f1f1;
  font-family: Arial, sans-serif;
}
.navbar-brand {
  font-size: 1.8rem;
}
.container {
  margin-top: 20px;
}
.card {
  border: none;
  border-radius: 0.5rem;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
}
.list-group-item {
  font-size: 1rem;
}
.alert {
  font-size: 0.95rem;
}
h2 {
  margin-bottom: 20px;
  color: #343a40;
}
.modal { display: none; position: fixed; z-index: 1050; left: 0; top: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5);}
.modal.show { display: block; }
```

`templates/add_deal.html`

```html
{% extends "base.html" %}
{% block title %}Add Deal{% endblock %}
{% block content %}
<h2>Add a Deal</h2>
<form id="dealForm">
  <div class="form-group">
    <label>Product ID</label>
    <input type="number" id="deal_product_id" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Vendor ID</label>
    <input type="number" id="deal_vendor_id" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Deal Price</label>
    <input type="number" id="deal_price" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Start Date</label>
    <input type="date" id="deal_start_date" class="form-control" required>
  </div>
  <div class="form-group">
    <label>End Date</label>
    <input type="date" id="deal_end_date" class="form-control" required>
  </div>
  <button type="submit" class="btn btn-primary">Add Deal</button>
</form>
<div id="dealMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script>
document.getElementById("dealForm").addEventListener("submit", function(e){
  e.preventDefault();
  fetch("/add-deal", {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({
      product_id: document.getElementById('deal_product_id').value,
      vendor_id: document.getElementById('deal_vendor_id').value,
      deal_price: document.getElementById('deal_price').value,
      start_date: document.getElementById('deal_start_date').value,
      end_date: document.getElementById('deal_end_date').value
    })
  })
  .then(res => res.json())
  .then(result => {
    document.getElementById("dealMessage").innerHTML = '<div class="alert alert-success">'+ result.message +'</div>';
    this.reset();
  })
  .catch(err => {
    document.getElementById("dealMessage").innerHTML = '<div class="alert alert-danger">Error: '+ err +'</div>';
  });
});
</script>
{% endblock %}
```

`templates/add_product.html`

```html
{% extends "base.html" %}
{% block title %}Add Product{% endblock %}
{% block content %}
<h2>Add Product</h2>
<form id="productForm">
  <div class="form-group">
    <label>Product Name</label>
    <input type="text" id="product_name" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Category</label>
    <input type="text" id="category" class="form-control" required>
  </div>
  <div id="vendorsSection">
    <label>Vendors</label>
    <div class="vendor-row mb-2">
      <input type="text" placeholder="Vendor Name" class="vendor_name form-control d-inline w-25" required>
      <input type="url" placeholder="Vendor URL" class="vendor_url form-control d-inline w-50" required>
      <input type="number" placeholder="Price" class="vendor_price form-control d-inline w-20" required>
      <button type="button" class="btn btn-danger btn-sm remove-vendor">X</button>
    </div>
  </div>
  <button type="button" class="btn btn-secondary mb-2" id="addVendorBtn">Add Another Vendor</button>
  <button type="submit" class="btn btn-primary">Add Product</button>
</form>
<div id="productMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script>
function vendorRowHtml() {
  return `<div class="vendor-row mb-2">
    <input type="text" placeholder="Vendor Name" class="vendor_name form-control d-inline w-25" required>
    <input type="url" placeholder="Vendor URL" class="vendor_url form-control d-inline w-50" required>
    <input type="number" placeholder="Price" class="vendor_price form-control d-inline w-20" required>
    <button type="button" class="btn btn-danger btn-sm remove-vendor">X</button>
  </div>`;
}
document.getElementById('addVendorBtn').onclick = function() {
  document.getElementById('vendorsSection').insertAdjacentHTML('beforeend', vendorRowHtml());
};
document.getElementById('vendorsSection').addEventListener('click', function(e){
  if(e.target.classList.contains('remove-vendor')) {
    e.target.parentElement.remove();
  }
});
document.getElementById('productForm').addEventListener('submit', function(e){
  e.preventDefault();
  const vendors = [];
  document.querySelectorAll('.vendor-row').forEach(row => {
    vendors.push({
      vendor_name: row.querySelector('.vendor_name').value,
      vendor_website: row.querySelector('.vendor_url').value,
      price: row.querySelector('.vendor_price').value
    });
  });
  fetch('/products', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      product_name: document.getElementById('product_name').value,
      category: document.getElementById('category').value,
      vendors: vendors
    })
  })
  .then(r => r.json())
  .then(res => {
    document.getElementById('productMessage').innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    document.getElementById('productForm').reset();
    document.querySelectorAll('.vendor-row').forEach((row,i) => { if(i>0) row.remove(); });
  })
  .catch(()=> document.getElementById('productMessage').innerHTML = '<div class="alert alert-danger">Failed to add product</div>');
});
</script>
{% endblock %}
```

`templates/add_user.html`

```html
{% extends "base.html" %}
{% block title %}Add User{% endblock %}
{% block content %}
<h2>Add User</h2>
<form id="userForm">
  <div class="form-group">
    <label>User Name</label>
    <input type="text" id="user_name" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Email</label>
    <input type="email" id="email" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Mobile Number</label>
    <input type="text" id="mobile_number" class="form-control">
  </div>
  <div class="form-group">
    <label>Address</label>
    <textarea id="address" class="form-control"></textarea>
  </div>
  <button type="submit" class="btn btn-primary">Add User</button>
</form>
<div id="userMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script>
document.getElementById('userForm').addEventListener('submit', function(e){
  e.preventDefault();
  const data = {
    user_name: document.getElementById('user_name').value,
    email: document.getElementById('email').value,
    mobile_number: document.getElementById('mobile_number').value,
    address: document.getElementById('address').value
  };
  fetch('/users', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify(data)
  })
  .then(r => r.json())
  .then(res => {
    document.getElementById('userMessage').innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    document.getElementById('userForm').reset();
  })
  .catch(()=> document.getElementById('userMessage').innerHTML = '<div class="alert alert-danger">Failed to add user</div>');
});
</script>
{% endblock %}
```

`templates/add_vendor.html`

```html
{% extends "base.html" %}
{% block title %}Add Vendor{% endblock %}
{% block content %}
<h2>Add Vendor</h2>
<form id="vendorForm">
  <div class="form-group">
    <label>Vendor Name</label>
    <input type="text" id="vendor_name" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Website URL</label>
    <input type="url" id="website_url" class="form-control" required>
  </div>
  <button type="submit" class="btn btn-primary">Add Vendor</button>
</form>
<div id="vendorMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script>
document.getElementById('vendorForm').onsubmit = function(e){
  e.preventDefault();
  fetch('/vendors', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      vendor_name: document.getElementById('vendor_name').value,
      website_url: document.getElementById('website_url').value
    })
  })
  .then(r => r.json())
  .then(res => {
    document.getElementById('vendorMessage').innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    document.getElementById('vendorForm').reset();
  })
  .catch(()=> document.getElementById('vendorMessage').innerHTML = '<div class="alert alert-danger">Failed to add vendor</div>');
};
</script>
{% endblock %}
```

`templates/base.html`

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Dashboard{% endblock %}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
  {% block extra_css %}{% endblock %}
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="/">Product Alerts</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
        <li class="nav-item"><a class="nav-link" href="/dashboard">Dashboard</a></li>
        <li class="nav-item"><a class="nav-link" href="/add-user">Add User</a></li>
        <li class="nav-item"><a class="nav-link" href="/add-vendor">Add Vendor</a></li>
        <li class="nav-item"><a class="nav-link" href="/add-product">Add Product</a></li>
        <li class="nav-item"><a class="nav-link" href="/set-alert">Set Alert</a></li>
        <li class="nav-item"><a class="nav-link" href="/get-deals">User Deals</a></li>
        <li class="nav-item"><a class="nav-link" href="/view-products">View Products</a></li>
        <li class="nav-item"><a class="nav-link" href="/view-vendors">View Vendors</a></li>
      </ul>
    </div>
  </nav>
  <div class="container mt-4">
    {% block content %}{% endblock %}
  </div>
  <!-- Bootstrap JS and dependencies -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Custom JS -->
  <script src="{{ url_for('static', filename='script.js') }}"></script>
  {% block extra_js %}{% endblock %}
</body>
</html>
```

`templates/dashboard.html`

```html
{% extends "base.html" %}
{% block title %}Dashboard{% endblock %}
{% block content %}
<h2>Dashboard</h2>
<div class="row">
  <div class="col-md-6">
    <h4>Recent Products</h4>
    <div id="recent-products"></div>
  </div>
  <div class="col-md-6">
    <h4>Latest Deals</h4>
    <div id="latest-deals"></div>
  </div>
</div>
<a href="{{ url_for('my_deals_page') }}">My Deals</a>
<a href="{{ url_for('add_deal_page') }}" class="btn btn-success mb-3">Add Deal</a>

<h3>My Alerts</h3>
<div id="myDealsList"></div>

<!-- Modal for setting alert -->
<div class="modal" tabindex="-1" id="setAlertModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><h5 class="modal-title">Set Price Alert</h5></div>
      <div class="modal-body">
        <form id="setAlertForm">
          <input type="hidden" id="alert_product_id">
          <div class="form-group">
            <label>Product</label>
            <input type="text" id="alert_product_name" class="form-control" readonly>
          </div>
          <div class="form-group">
            <label>Target Price</label>
            <input type="number" id="alert_price" class="form-control" required>
          </div>
          <button type="submit" class="btn btn-primary">Set Alert</button>
        </form>
        <div id="alertMsg" class="mt-2"></div>
      </div>
    </div>
  </div>
</div>
<a href="{{ url_for('logout') }}">Logout</a>
{% endblock %}
{% block extra_js %}
<script>
document.addEventListener("DOMContentLoaded", function(){
  fetch("/products")
    .then(response => response.json())
    .then(data => {
      let html = '<ul class="list-group">';
      data.forEach(prod => {
         html += '<li class="list-group-item"><strong>' + prod.product_name + '</strong> (' + prod.category + ') ' +
         '<button class="btn btn-sm btn-warning" onclick="openSetAlert(' + prod.product_id + ', \'' + prod.product_name + '\')">Set Alert</button></li>';
      });
      html += '</ul>';
      document.getElementById("recent-products").innerHTML = html;
    });

  fetch("/deals")
    .then(response => response.json())
    .then(data => {
      let html = '';
      if(data.length){
        html = '<ul class="list-group">';
        data.forEach(deal => {
          html += '<li class="list-group-item">' +
                    deal.product_name + ' from ' + deal.vendor_name +
                    ' at ₹' + deal.deal_price + ' (' + deal.start_date + ' to ' + deal.end_date + ')' +
                  '</li>';
        });
        html += '</ul>';
      } else {
          html = '<p>No deals available.</p>';
      }
      document.getElementById("latest-deals").innerHTML = html;
    });

  fetch('/my-deals')
    .then(r => r.json())
    .then(alerts => {
      let html = '';
      if (alerts.length === 0) {
        html = '<div class="alert alert-info">No deals/alerts set by you.</div>';
      } else {
        html = '<ul class="list-group">';
        alerts.forEach(a => {
          html += `<li class="list-group-item">
            <b>${a.product_name}</b> (${a.category}) — Target Price: ₹${a.price_alert}
          </li>`;
        });
        html += '</ul>';
      }
      document.getElementById('myDealsList').innerHTML = html;
    });
});

function openSetAlert(pid, pname) {
  document.getElementById('alert_product_id').value = pid;
  document.getElementById('alert_product_name').value = pname;
  document.getElementById('setAlertModal').classList.add('show');
}
document.getElementById('setAlertForm').onsubmit = function(e){
  e.preventDefault();
  fetch('/alerts', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      product_id: document.getElementById('alert_product_id').value,
      price_alert: document.getElementById('alert_price').value
    })
  })
  .then(r=>r.json())
  .then(res=>{
    document.getElementById('alertMsg').innerHTML = '<div class="alert alert-success">'+res.message+'</div>';
    setTimeout(()=>document.getElementById('setAlertModal').classList.remove('show'), 1000);
  });
};
</script>
{% endblock %}
@app.route("/dashboard")
@login_required
def dashboard():
    return render_template("dashboard.html")
```

`templates/edit_product.html`

```html
{% extends "base.html" %}
{% block title %}Edit Product{% endblock %}
{% block content %}
<h2>Edit Product</h2>
<form id="productEditForm">
  <input type="hidden" id="product_id">
  <div class="form-group">
    <label>Product Name</label>
    <input class="form-control" id="product_name" required>
  </div>
  <div class="form-group">
    <label>Category</label>
    <input class="form-control" id="product_category">
  </div>
  <h5>Vendor Prices</h5>
  <div id="vendorPriceRows"></div>
  <button id="addVendorRow" class="btn btn-secondary" type="button">Add Vendor Row</button>
  <br><br>
  <button class="btn btn-primary" type="submit">Save Product</button>
  <button id="deleteProduct" class="btn btn-danger" type="button">Delete Product</button>
</form>
<div id="productMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script src="{{ url_for('static', filename='js/products.js') }}"></script>
{% endblock %}
```

`templates/edit_vendor.html`

```html
{% extends "base.html" %}
{% block title %}Edit Vendor{% endblock %}
{% block content %}
<h2>Edit Vendor</h2>
<form id="editVendorForm">
  <input id="vendor_name" required>
  <input id="website_url" required>
  <button>Save</button>
</form>
<div id="vendorMessage" class="mt-2"></div>
{% endblock %}
{% block extra_js %}
<script src="{{ url_for('static', filename='js/vendors.js') }}"></script>
<script>
const params = new URLSearchParams(window.location.search);
const vendor_id = params.get('vendor_id');
fetch('/vendors/' + vendor_id)
  .then(r=>r.json())
  .then(v=>{
    document.getElementById('vendor_name').value = v.vendor_name;
    document.getElementById('website_url').value = v.website_url;
  });
document.getElementById('editVendorForm').onsubmit = function(e){
  e.preventDefault();
  fetch('/vendors/' + vendor_id, {
    method: 'PUT',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
      vendor_name: document.getElementById('vendor_name').value,
      website_url: document.getElementById('website_url').value
    })
  }).then(r=>r.json()).then(alert);
};
</script>
{% endblock %}
```

`templates/get_deals.html`

```html
{% extends "base.html" %}
{% block title %}Latest Deals{% endblock %}
{% block content %}
<h2>Latest Deals</h2>
<div id="dealsList"></div>
{% endblock %}
{% block extra_js %}
<script>
fetch('/deals')
  .then(r => r.json())
  .then(deals => {
    let html = '';
    if (deals.length === 0) {
      html = '<div class="alert alert-info">No deals available.</div>';
    } else {
      html = '<ul class="list-group">';
      deals.forEach(d => {
        html += `<li class="list-group-item">
          <b>${d.product_name}</b> from <b>${d.vendor_name}</b> — ₹${d.deal_price} 
          <span class="text-muted">(${d.start_date} to ${d.end_date})</span>
        </li>`;
      });
      html += '</ul>';
    }
    document.getElementById('dealsList').innerHTML = html;
  });
</script>
{% endblock %}
```

`templates/index.html`

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product Alerts Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Optional: include Bootstrap CSS for styling -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        /* Internal custom CSS */
        body {
            background-color: #f8f9fa;
        }
        .section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: #fff;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .result-box {
            margin-top: 1rem;
            padding: 0.75rem;
            background-color: #e9ecef;
            border-radius: 0.5rem;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container mt-5">

        <h1 class="mb-4 text-center">Product Alerts Dashboard</h1>

        <!-- Section: Add User -->
        <div class="section" id="userSection">
            <h3>Add User</h3>
            <form id="userForm">
                <div class="form-group">
                    <label for="user_name">User Name</label>
                    <input type="text" id="user_name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="mobile_number">Mobile Number</label>
                    <input type="text" id="mobile_number" class="form-control">
                </div>
                <div class="form-group">
                    <label for="address">Address</label>
                    <textarea id="address" class="form-control" rows="2"></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Add User</button>
            </form>
            <div id="userResult" class="result-box"></div>
        </div>

        <!-- Section: Add Vendor -->
        <div class="section" id="vendorSection">
            <h3>Add Vendor</h3>
            <form id="vendorForm">
                <div class="form-group">
                    <label for="vendor_name">Vendor Name</label>
                    <input type="text" id="vendor_name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="website_url">Website URL</label>
                    <input type="url" id="website_url" class="form-control">
                </div>
                <button type="submit" class="btn btn-primary">Add Vendor</button>
            </form>
            <div id="vendorResult" class="result-box"></div>
        </div>

        <!-- Section: Add Product -->
        <div class="section" id="productSection">
            <h3>Add Product & Prices</h3>
            <form id="productForm">
                <div class="form-group">
                    <label for="product_name">Product Name</label>
                    <input type="text" id="product_name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <input type="text" id="category" class="form-control" required>
                </div>
                <h5>Vendors & Prices</h5>
                <div id="vendorPrices">
                    <div class="form-row mb-2">
                        <div class="col">
                            <input type="text" class="form-control vendor_name" placeholder="Vendor Name" required>
                        </div>
                        <div class="col">
                            <input type="number" step="0.01" class="form-control vendor_price" placeholder="Price" required>
                        </div>
                    </div>
                </div>
                <button type="button" id="addVendorRow" class="btn btn-secondary mb-2">Add Another Vendor</button><br>
                <button type="submit" class="btn btn-primary">Add Product</button>
            </form>
            <div id="productResult" class="result-box"></div>
        </div>

        <!-- Section: Set Price Alert -->
        <div class="section" id="alertSection">
            <h3>Set Price Alert</h3>
            <form id="alertForm">
                <div class="form-group">
                    <label for="alert_user_id">User ID</label>
                    <input type="number" id="alert_user_id" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="alert_product_id">Product ID</label>
                    <input type="number" id="alert_product_id" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="price_alert">Alert Price</label>
                    <input type="number" step="0.01" id="price_alert" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-primary">Set Alert</button>
            </form>
            <div id="alertResult" class="result-box"></div>
        </div>

        <!-- Section: Get User Deals -->
        <div class="section" id="dealsSection">
            <h3>Get User Deals</h3>
            <form id="dealsForm">
                <div class="form-group">
                    <label for="deals_user_id">User ID</label>
                    <input type="number" id="deals_user_id" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-primary">Get Deals</button>
            </form>
            <div id="dealsResult" class="result-box"></div>
        </div>

        <!-- Section: View All Products -->
        <div class="section" id="viewProductsSection">
            <h3>View All Products</h3>
            <button id="viewProductsBtn" class="btn btn-info">Load Products</button>
            <div id="viewProductsResult" class="result-box"></div>
        </div>

        <!-- Section: View All Vendors -->
        <div class="section" id="viewVendorsSection">
            <h3>View All Vendors</h3>
            <button id="viewVendorsBtn" class="btn btn-info">Load Vendors</button>
            <div id="viewVendorsResult" class="result-box"></div>
        </div>

        <!-- Section: Track Product Prices -->
        <div class="section" id="trackProductsSection">
            <h3>Track Product Prices</h3>
            <button id="trackProductsBtn" class="btn btn-info">Track Prices</button>
            <div id="trackProductsResult" class="result-box"></div>
        </div>
    </div>

    <script>
        // Set your API base URL to the running Flask server.
        const baseUrl = "http://127.0.0.1:5000";

        // Helper function for handling fetch responses
        function handleResponse(response) {
            if (!response.ok) {
                return response.json().then(err => { throw err; });
            }
            return response.json();
        }

        // Add User
        document.getElementById('userForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const userData = {
                user_name: document.getElementById('user_name').value,
                email: document.getElementById('email').value,
                mobile_number: document.getElementById('mobile_number').value,
                address: document.getElementById('address').value
            };

            fetch(baseUrl + "/users", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(userData)
            })
            .then(handleResponse)
            .then(data => {
                document.getElementById('userResult').innerText = JSON.stringify(data, null, 2);
                document.getElementById('userForm').reset();
            })
            .catch(error => {
                document.getElementById('userResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Add Vendor
        document.getElementById('vendorForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const vendorData = {
                vendor_name: document.getElementById('vendor_name').value,
                website_url: document.getElementById('website_url').value
            };

            fetch(baseUrl + "/vendors", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(vendorData)
            })
            .then(handleResponse)
            .then(data => {
                document.getElementById('vendorResult').innerText = JSON.stringify(data, null, 2);
                document.getElementById('vendorForm').reset();
            })
            .catch(error => {
                document.getElementById('vendorResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Add Product and Prices
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const vendors = [];
            const vendorNames = document.getElementsByClassName('vendor_name');
            const vendorPrices = document.getElementsByClassName('vendor_price');
            for(let i = 0; i < vendorNames.length; i++){
                vendors.push({
                    vendor_name: vendorNames[i].value,
                    price: parseFloat(vendorPrices[i].value)
                });
            }
            const productData = {
                product_name: document.getElementById('product_name').value,
                category: document.getElementById('category').value,
                vendors: vendors
            };

            fetch(baseUrl + "/products", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(productData)
            })
            .then(handleResponse)
            .then(data => {
                document.getElementById('productResult').innerText = JSON.stringify(data, null, 2);
                document.getElementById('productForm').reset();
            })
            .catch(error => {
                document.getElementById('productResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Add a vendor row for product input
        document.getElementById('addVendorRow').addEventListener('click', function() {
            const vendorRow = document.createElement('div');
            vendorRow.classList.add('form-row', 'mb-2');
            vendorRow.innerHTML = `
                <div class="col">
                    <input type="text" class="form-control vendor_name" placeholder="Vendor Name" required>
                </div>
                <div class="col">
                    <input type="number" step="0.01" class="form-control vendor_price" placeholder="Price" required>
                </div>
            `;
            document.getElementById('vendorPrices').appendChild(vendorRow);
        });

        // Set Price Alert
        document.getElementById('alertForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const alertData = {
                user_id: parseInt(document.getElementById('alert_user_id').value),
                product_id: parseInt(document.getElementById('alert_product_id').value),
                price_alert: parseFloat(document.getElementById('price_alert').value)
            };

            fetch(baseUrl + "/alerts", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(alertData)
            })
            .then(handleResponse)
            .then(data => {
                document.getElementById('alertResult').innerText = JSON.stringify(data, null, 2);
                document.getElementById('alertForm').reset();
            })
            .catch(error => {
                document.getElementById('alertResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Get User Deals
        document.getElementById('dealsForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const userId = document.getElementById('deals_user_id').value;

            fetch(baseUrl + "/deals/" + userId)
            .then(handleResponse)
            .then(data => {
                document.getElementById('dealsResult').innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById('dealsResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Load All Products
        document.getElementById('viewProductsBtn').addEventListener('click', function() {
            fetch(baseUrl + "/products")
            .then(handleResponse)
            .then(data => {
                document.getElementById('viewProductsResult').innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById('viewProductsResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Load All Vendors
        document.getElementById('viewVendorsBtn').addEventListener('click', function() {
            fetch(baseUrl + "/vendors")
            .then(handleResponse)
            .then(data => {
                document.getElementById('viewVendorsResult').innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById('viewVendorsResult').innerText = "Error: " + JSON.stringify(error);
            });
        });

        // Track Product Prices
        document.getElementById('trackProductsBtn').addEventListener('click', function() {
            fetch(baseUrl + "/track-products")
            .then(handleResponse)
            .then(data => {
                document.getElementById('trackProductsResult').innerText = JSON.stringify(data, null, 2);
            })
            .catch(error => {
                document.getElementById('trackProductsResult').innerText = "Error: " + JSON.stringify(error);
            });
        });
    </script>
</body>
</html>
```

`templates/login.html`

```html
{% extends "base.html" %}
{% block title %}ShopSmartley — Login{% endblock %}
{% block content %}
<div class="row justify-content-center">
  <div class="col-md-5">
    <div class="card mt-5">
      <div class="card-body">
        <h4 class="card-title mb-3">Sign in to ShopSmartley</h4>
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="alert alert-{{ category }}">{{ message }}</div>
            {% endfor %}
          {% endif %}
        {% endwith %}
        <form method="post" action="{{ url_for('login') }}">
          <div class="form-group">
            <label>Username or Email</label>
            <input type="text" name="username" class="form-control" required>
          </div>
          <div class="form-group">
            <label>Password</label>
            <input type="password" name="password" class="form-control" required>
          </div>
          <button type="submit" class="btn btn-primary">Login</button>
        </form>
        <p>Don't have an account? <a href="{{ url_for('register') }}">Register here</a></p>
      </div>
    </div>
  </div>
</div>
{% endblock %}
```

`templates/my_deals.html`

```html
{% extends "base.html" %}
{% block title %}My Deals / Alerts{% endblock %}
{% block content %}
<h2>My Deals / Alerts</h2>
<div id="myDealsList"></div>
{% endblock %}
{% block extra_js %}
<script>
fetch('/my-deals')
  .then(r => r.json())
  .then(alerts => {
    let html = '';
    if (alerts.length === 0) {
      html = '<div class="alert alert-info">No deals/alerts set by you.</div>';
    } else {
      html = '<ul class="list-group">';
      alerts.forEach(a => {
        html += `<li class="list-group-item">
          <b>${a.product_name}</b> (${a.category}) — Target Price: ₹${a.target_price}
        </li>`;
      });
      html += '</ul>';
    }
    document.getElementById('myDealsList').innerHTML = html;
  });

fetch("/deals")
  .then(response => response.json())
  .then(data => {
    let html = '';
    if(data.length){
      html = '<ul class="list-group">';
      data.forEach(deal => {
        html += '<li class="list-group-item">' +
                  deal.product_name + ' from ' + deal.vendor_name +
                  ' at ₹' + deal.deal_price + ' (' + deal.start_date + ' to ' + deal.end_date + ')' +
                '</li>';
      });
      html += '</ul>';
    } else {
        html = '<p>No deals available.</p>';
    }
    document.getElementById("latest-deals").innerHTML = html;
  });
</script>
{% endblock %}
```

`templates/register.html`

```html
{% extends "base.html" %}
{% block title %}Register{% endblock %}
{% block content %}
<h2>Register</h2>
<form method="post" action="{{ url_for('register') }}">
  <div class="form-group">
    <label>Username</label>
    <input type="text" name="username" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Email</label>
    <input type="email" name="email" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Password</label>
    <input type="password" name="password" class="form-control" required>
  </div>
  <button type="submit" class="btn btn-primary">Register</button>
</form>
{% endblock %}
```

`templates/search.html`

```html
{% extends "base.html" %}
{% block title %}Search Prices{% endblock %}
{% block content %}
<h2>Search Live Prices</h2>
<form id="searchForm" class="form-inline mb-3">
  <input id="searchQuery" class="form-control mr-2" placeholder="e.g. Apple iPhone 14" style="width:400px">
  <button class="btn btn-primary" type="submit">Search</button>
</form>
<div id="searchResults"></div>
{% endblock %}
{% block extra_js %}
<script src="{{ url_for('static', filename='js/search.js') }}"></script>
{% endblock %}
```

`templates/set_alert.html`

```html
{% extends "base.html" %}
{% block title %}Set Price Alert{% endblock %}
{% block content %}
<h2>Set Price Alert</h2>
<form id="alertForm">
  <div class="form-group">
    <label>User ID</label>
    <input type="number" name="user_id" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Product ID</label>
    <input type="number" id="alert_product_id" name="product_id" class="form-control" required>
  </div>
  <div class="form-group">
    <label>Alert Price</label>
    <input type="number" id="alert_price" step="0.01" name="price_alert" class="form-control" required>
  </div>
  <button type="submit" class="btn btn-primary">Set Alert</button>
</form>
<div id="alertMessage" class="mt-2"></div>
<button class="btn btn-success mb-3" onclick="window.location.href='/set-alert'">Set New Alert</button>
{% endblock %}
{% block extra_js %}
<script>
document.getElementById("alertForm").addEventListener("submit", function(e){
  e.preventDefault();
  let formData = new FormData(this);
  let data = Object.fromEntries(formData.entries());
  fetch("http://127.0.0.1:5000/alerts", { 
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({
      product_id: document.getElementById('alert_product_id').value,
      price_alert: document.getElementById('alert_price').value
    })
  })
  .then(res => res.json())
  .then(result => {
    document.getElementById("alertMessage").innerHTML = '<div class="alert alert-success">'+ result.message +'</div>';
    this.reset();
  })
  .catch(err => {
    document.getElementById("alertMessage").innerHTML = '<div class="alert alert-danger">Error: '+ err +'</div>';
  });
});
</script>
{% endblock %}
```

`templates/track_products.html`

```html
{% extends "base.html" %}
{% block title %}Track Product Prices{% endblock %}
{% block content %}
<h2>Track Product Prices</h2>
<button id="trackPrices" class="btn btn-info mb-3">Refresh Price Tracking</button>
<div id="trackProducts"></div>
{% endblock %}
{% block extra_js %}
<script>
const FETCH_INTERVAL_MS = 30000; // 30 seconds
function loadTrackedPrices(){
  fetch("/api/track-products")
  .then(res => res.json())
  .then(data => {
    let html = '<div class="row">';
    data.forEach(item => {
      html += `<div class="col-md-6">
        <div class="card mb-2"><div class="card-body">
          <h5>${item.product_name}</h5>
          <p>${item.category || ''}</p>
          <ul>`;
      item.vendors.forEach(v => {
        html += `<li><a href="${v.vendor_website || '#'}" target="_blank" rel="noreferrer">${v.vendor_name}</a> — ${v.price === null ? 'N/A' : '₹' + v.price}</li>`;
      });
      html += `</ul></div></div></div>`;
    });
    html += '</div>';
    document.getElementById("trackProducts").innerHTML = html;
  })
  .catch(err => {
    document.getElementById("trackProducts").innerHTML = '<div class="alert alert-danger">Error: '+ err +'</div>';
  });
}

document.getElementById("trackPrices").addEventListener("click", loadTrackedPrices);
loadTrackedPrices();
setInterval(loadTrackedPrices, FETCH_INTERVAL_MS);
</script>
{% endblock %}
```

`templates/view_products.html`

```html
{% extends "base.html" %}
{% block title %}View Products{% endblock %}
{% block content %}
<h2>All Products</h2>
<button id="loadProducts" class="btn btn-info mb-3">Refresh Products</button>
<div id="productsList"></div>
{% endblock %}
{% block extra_js %}
<script>
document.getElementById("loadProducts").addEventListener("click", function(){
  fetch("http://127.0.0.1:5000/products")
  .then(res => res.json())
  .then(data => {
    let html = '<div class="row">';
    data.forEach(prod => {
       html += `<div class="col-md-4">
                  <div class="card mb-3">
                    <div class="card-body">
                      <h5 class="card-title">${prod.product_name}</h5>
                      <p class="card-text">${prod.category}</p>
                    </div>
                  </div>
                </div>`;
    });
    html += '</div>';
    document.getElementById("productsList").innerHTML = html;
  })
  .catch(err => {
    document.getElementById("productsList").innerHTML = '<div class="alert alert-danger">Error: '+ err +'</div>';
  });
});
</script>
{% endblock %}
```

`templates/view_vendors.html`

```html
{% extends "base.html" %}
{% block title %}Vendors — ShopSmartley{% endblock %}
{% block content %}
<h2>Vendors</h2>
<div class="mb-3">
  <a href="/add-vendor" class="btn btn-success">Add Vendor</a>
  <a href="/track-products" class="btn btn-info">Track Prices</a>
</div>
<div id="vendorsContainer" class="row"></div>
{% endblock %}
{% block extra_js %}
<script>
async function loadVendors(){
  const out = document.getElementById("vendorsContainer");
  out.innerHTML = '<div class="col-12 text-center py-4">Loading…</div>';
  try {
    const res = await fetch("/vendors");
    const vendors = await res.json();
    if (!vendors || vendors.length === 0) {
      out.innerHTML = '<div class="col-12"><div class="alert alert-info">No vendors found.</div></div>';
      return;
    }
    let html = "";
    vendors.forEach(v=>{
      html += `<div class="col-md-4">
        <div class="card mb-3">
          <div class="card-body">
            <h5 class="card-title">${v.vendor_name || '—'}</h5>
            <p class="card-text"><a href="${v.website_url||'#'}" target="_blank" rel="noreferrer">${v.website_url || 'No website'}</a></p>
            <div class="mt-2">
              <a href="/edit-vendor?vendor_id=${v.vendor_id}" class="btn btn-sm btn-primary">Edit</a>
              <button class="btn btn-sm btn-danger" onclick="deleteVendor(${v.vendor_id})">Delete</button>
              <a class="btn btn-sm btn-outline-secondary" href="/search?q=${encodeURIComponent(v.vendor_name||'')}" title="Search products from this vendor">Search</a>
            </div>
          </div>
        </div>
      </div>`;
    });
    out.innerHTML = html;
  } catch (e) {
    out.innerHTML = '<div class="col-12"><div class="alert alert-danger">Failed to load vendors</div></div>';
  }
}

async function deleteVendor(id){
  if(!confirm("Delete vendor and related product prices?")) return;
  try {
    const res = await fetch(`/vendors/${id}`, { method: "DELETE" });
    const j = await res.json();
    alert(j.message || "Deleted");
    loadVendors();
  } catch(e){
    alert("Delete failed");
  }
}

document.addEventListener("DOMContentLoaded", function(){
  loadVendors();
});
</script>
{% endblock %}
```

